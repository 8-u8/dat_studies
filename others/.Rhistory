lines(fabric-kfs4$muhat,col=4)
axis(side=1,at=1+0:11*12,labels=c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
abline(v=120.5,lty=3)
abline(h=0,col=8)
### 解析例?@ 体組成計測記録の分析（ローカルレベルモデル） ###
# RパッケージKFASの読み込み(R の起動ごとに必要)
library(KFAS)
# 体重データの読み込み（パス指定が必要。難しければ、データ読み込み済.RDataを起動すれば最初からデータが入っています）
Weight <- ts(scan("リーディングDAT講座のソースコード/Weight.dat"))
# ローカルレベルモデルの定義
mod <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
# 未知パラメータの推定
fit <- fitSSM(mod, numeric(2), method = "BFGS")
# カルマンフィルタ・カルマンスムーザの実行
kfs <- KFS(fit$model)
# フィルタ化推定量とその信頼区間
afilt <- kfs$att
Pfilt <- kfs$Ptt[,,]
afiltupper <- afilt+sqrt(Pfilt)*qnorm(0.975)
afiltlower <- afilt-sqrt(Pfilt)*qnorm(0.975)
# スライド番号17の図の描画
par(mar=c(3,3,1,1))
par(mgp=c(2,.5,0))
plot(Weight,type="o",lty=3,xlab="経過日数",ylab="体重（kg）",ylim=c(83,87))
lines(afilt,lwd=2)
lines(afiltupper)
lines(afiltlower)
# 平滑化状態の信頼区間
alphahatconf <- predict(fit$model, interval = "confidence", level = 0.95)
# スライド番号18の図の描画
plot(Weight,type="o",lty=3,xlab="経過日数",ylab="体重（kg）",ylim=c(83,87))
lines(alphahatconf[,1],lwd=2)
lines(alphahatconf[,2])
lines(alphahatconf[,3])
# 欠測値の補間
WeightNA <- Weight[c(1:20,rep(NA,20),41:60)] # 21~40日目をNA(欠損)に置き換え
modNA <- SSModel(WeightNA ~ SSMtrend(1, Q = NA), H = NA)
fitNA <- fitSSM(modNA, numeric(2), method = "BFGS")
confNA <- predict(fitNA$model, interval="confidence", level=0.95)
preNA  <- predict(fitNA$model, interval="prediction", level=0.95)
# スライド番号19の図の描画
plot(Weight,type="o",lty=3,xlab="経過日数",ylab="体重（kg）",ylim=c(83,87))
lines(21:40,Weight[21:40],type="o",lty=3,col=8)
lines(confNA[,1],lwd=2)
lines(confNA[,2])
lines(confNA[,3])
lines(21:40,preNA[21:40,2],lty=2)
lines(21:40,preNA[21:40,3],lty=2)
# 長期予測
mod50 <- SSModel(Weight[1:50] ~ SSMtrend(1, Q = NA), H = NA)
fit50 <- fitSSM(mod50, numeric(2), method = "BFGS")
conf50 <- predict(fit50$model, interval ="confidence", n.ahead = 10)
pre50  <- predict(fit50$model, interval ="prediction", n.ahead = 10)
# スライド番号20の図の描画
plot(Weight,type="o",lty=3,xlab="経過日数",ylab="体重（kg）",ylim=c(83,87))
lines(51:60,Weight[51:60],type="o",lty=3,col=8)
lines(51:60,conf50[,1],lwd=2)
lines(51:60,conf50[,2])
lines(51:60,conf50[,3])
lines(51:60,pre50[,2],lty=2)
lines(51:60,pre50[,3],lty=2)
# 長期予測（欠測値NAとして予測するやり方）
Weight50 <- Weight[c(1:50,rep(NA,10))] # 51日目以降をNA(欠損)に置き換え
mod50NA <- SSModel(Weight50 ~ SSMtrend(1, Q = NA), H = NA)
fit50NA <- fitSSM(mod50NA, numeric(2), method = "BFGS")
conf50NA <- predict(fit50NA$model, interval="confidence", level=0.95)
pre50NA  <- predict(fit50NA$model, interval="prediction", level=0.95)
### 解析例1. 体組成計測記録の分析（２変量ローカルレベルモデル） ###
Bodyfat <- ts(scan("リーディングDAT講座のソースコード/Bodyfat.dat")) # 体脂肪率データの読み込み（パス指定が必要。難しければ、データ読み込み済.RDataを起動すれば最初からデータが入っています）
# 欠損なしの場合
modSUTSE <- SSModel(cbind(Weight, Bodyfat) ~
SSMtrend(1, Q = matrix(NA,2,2)), H = matrix(NA,2,2))
fitSUTSE <- fitSSM(modSUTSE, numeric(6), method="BFGS")
kfsSUTSE <- KFS(fitSUTSE$model)
# 欠損あり（21~40日目の体重がNA）の場合
## Bodyfatが同じ期間欠損していた場合
#BodyfatNA <- Bodyfat[c(1:20,rep(NA,20),41:60)]
##元ソースはこれ
modSUTSENA <- SSModel(cbind(WeightNA, Bodyfat) ~
SSMtrend(1, Q = matrix(NA,2,2)), H = matrix(NA,2,2))
## BodyfatNAでfitting
#modSUTSENA <- SSModel(cbind(WeightNA, BodyfatNA) ~
#                        SSMtrend(1, Q = matrix(NA,2,2)), H = matrix(NA,2,2))
fitSUTSENA <- fitSSM(modSUTSENA, numeric(6), method="BFGS")
kfsSUTSENA <- KFS(fitSUTSENA$model)
confSUTSENA <- predict(fitSUTSENA$model, interval="confidence", level=0.95)
preSUTSENA  <- predict(fitSUTSENA$model, interval="prediction", level=0.95)
# スライド番号26の分散共分散行列の表示
fitSUTSE$model$H
fitSUTSE$model$Q
# スライド番号27の図の描画
par(mfrow=c(2,1))   # 描画領域を２分割
par(mar=c(3,4,1,1)) # 描画領域の余白設定
plot(Bodyfat,type="o",lty=3,xlab="経過日数",ylab="体脂肪率（％）")
lines(confSUTSENA$Bodyfat[,1],lwd=2)
lines(confSUTSENA$Bodyfat[,2])
lines(confSUTSENA$Bodyfat[,3])
plot(Weight,type="o",lty=3,ylim=c(83,86.5),xlab="経過日数",ylab="体重（kg）")
lines(confNA[,1],lwd=2,col=8)
lines(confNA[,2],col=8)
lines(confNA[,3],col=8)
# 欠損の補完を行う。普通のカルマンフィルタよりもうねうねしている。
## 体脂肪率と体重の相関を使って補間されているため、欠損値補完の精度を上げられる。
lines(21:40,preNA[21:40,2],lty=2,col=8)
lines(21:40,preNA[21:40,3],lty=2,col=8)
lines(confSUTSENA$Weight[,1],lwd=2)
lines(confSUTSENA$Weight[,2])
lines(confSUTSENA$Weight[,3])
lines(21:40,preSUTSENA$Weight[21:40,2],lty=2)
lines(21:40,preSUTSENA$Weight[21:40,3],lty=2)
### 解析例2. 体組成計測記録の分析（トレンド成分モデル） ###
#
# 1.ローカルレベルモデル
# 2.平滑化トレンドモデル
# 3.ローカル線形トレンドモデル
# モデル定義
mod1 <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA) # Local Level Model
mod2 <- SSModel(Weight ~ SSMtrend(2, Q = list(0, NA)), H = NA) # 平滑化トレンドモデル
mod3 <- SSModel(Weight ~ SSMtrend(2, Q = list(NA,NA)), H = NA) # ローカル線系トレンドモデル
# 未知パラメータの推定
fit1 <- fitSSM(mod1, numeric(2), method = "BFGS")
fit2 <- fitSSM(mod2, numeric(2), method = "BFGS")
fit3 <- fitSSM(mod3, numeric(3), method = "BFGS")
# カルマンフィルタ・カルマンスムーザの実行
kfs1 <- KFS(fit1$model)
kfs2 <- KFS(fit2$model)
kfs3 <- KFS(fit3$model)
# 最大対数尤度
## sum(kfs1$Finf>0) * log(2*pi)/2の部分で修正をかけている。
## 理由はDurbin and Koopman 2012にあるっぽいね。
logLik1 <- kfs1$logLik - sum(kfs1$Finf>0) * log(2*pi)/2 #
logLik2 <- kfs2$logLik - sum(kfs2$Finf>0) * log(2*pi)/2
logLik3 <- kfs3$logLik - sum(kfs3$Finf>0) * log(2*pi)/2
# AIC (赤池情報量規準)
AIC1 <- -2*logLik1 + 2*( 2 + 1 ) # 観測値撹乱項1つ + 状態撹乱項1つ + 体重の水準成分
AIC2 <- -2*logLik2 + 2*( 2 + 2 ) # 観測値撹乱項1つ + 状態撹乱項1つ + 体重の水準と傾き成分
AIC3 <- -2*logLik3 + 2*( 3 + 2 ) # 観測値撹乱項1つ + 状態撹乱項2つ + 体重の水準と傾き成分
# スライド番号33の図の描画
par(mfrow=c(2,1))   # 描画領域を２分割
par(mar=c(2,4,1,1)) # 描画領域の余白設定
plot(Weight,type="o",lty=3,xlab="",ylab="水準成分") # 実測
lines(kfs1$alphahat[,"level"],lwd=2,col=8)          # ローカルレベルモデル
lines(kfs2$alphahat[,"level"],lwd=2)                # 平滑化トレンドモデル
lines(kfs3$alphahat[,"level"],lwd=2,lty=5)          # ローカル線形トレンドモデル
plot(kfs2$alphahat[,"slope"],type="l",lwd=2,xlab="",ylab="傾き成分") # 平滑化トレンドモデルにおける傾き成分
lines(kfs3$alphahat[,"slope"],lwd=2,lty=5)                           # ローカル線系トレンドモデルにおける傾き。
#####もっと柔軟なモデル####
### 解析例3. 小売業月次販売額の予測（基本構造時系列モデル） ###
# データ（csv形式）の読み込み（パス指定が必要。難しければ、データ読み込み済.RDataを起動すれば最初からデータが入っています）
#load(file = "リーディングDAT講座のソースコード/データ読み込み済.RData")
sales <- read.csv("リーディングDAT講座のソースコード/sales.csv", fileEncoding = "CP932")
fabric <- ts(sales[,2])                 # 織物衣服業のデータ
fabricNA <- c(fabric[1:120],rep(NA,24)) # 直近2年間をNA(欠測＝予測対象)
plot(sales$Fabrics.Apparel...Accessories, col = "blue",type = "b" , ylim = c(0,1200))
par(new = T)
plot(sales$Machinery...Equipment, col = "red",type = "b", ylim = c(0,1200))
# モデル定義
mod1<-SSModel(fabricNA ~ SSMtrend(1,Q=NA) + SSMseasonal(12,Q=0 ), H=NA)
mod2<-SSModel(fabricNA ~ SSMtrend(1,Q=NA) + SSMseasonal(12,Q=NA), H=NA)
mod3<-SSModel(fabricNA ~ SSMtrend(2,Q=list(0,NA)) + SSMseasonal(12,Q=0 ), H=NA)
mod4<-SSModel(fabricNA ~ SSMtrend(2,Q=list(0,NA)) + SSMseasonal(12,Q=NA), H=NA)
# 未知パラメータの推定
fit1 <- fitSSM(mod1, numeric(2), method = "BFGS")
fit2 <- fitSSM(mod2, numeric(3), method = "BFGS")
fit3 <- fitSSM(mod3, numeric(2), method = "BFGS")
fit4 <- fitSSM(mod4, numeric(3), method = "BFGS")
# カルマンフィルタ・カルマンスムーザの実行
kfs1 <- KFS(fit1$model)
kfs2 <- KFS(fit2$model)
kfs3 <- KFS(fit3$model)
kfs4 <- KFS(fit4$model)
# 最大対数尤度
logLik1 <- kfs1$logLik - sum(kfs1$Finf>0) * log(2*pi)/2
logLik2 <- kfs2$logLik - sum(kfs2$Finf>0) * log(2*pi)/2
logLik3 <- kfs3$logLik - sum(kfs3$Finf>0) * log(2*pi)/2
logLik4 <- kfs4$logLik - sum(kfs4$Finf>0) * log(2*pi)/2
# AIC (赤池情報量規準)
AIC1 <- -2*logLik1 + 2*( 2 + 12 )
AIC2 <- -2*logLik2 + 2*( 3 + 12 )
AIC3 <- -2*logLik3 + 2*( 2 + 13 )
AIC4 <- -2*logLik4 + 2*( 3 + 13 )
# スライド番号48の図の描画
par(mfrow=c(3,1))
par(ps=16)
par(mar=c(3.5,3.5,1,1))
par(mgp=c(2,0.5,0))
plot(fabric, type="l", lty=1, ylab = "販売額（10億円）",xaxt="n",xaxs="i",col=1,xlab="（a）原系列とトレンド（水準）成分の平滑化推定値および予測値")
axis(side=1,at=1+0:11*12,labels=c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(kfs2$alphahat[,"level"], col=3)
lines(kfs4$alphahat[,"level"], col=4)
abline(v=120.5,lty=3)
plot(kfs2$alphahat[,"sea_dummy1"],type="l", ylab = "販売額（10億円）",xaxt="n",xaxs="i",yaxs="i",col=3,xlab="（b）季節成分の平滑化推定値および予測値")
lines(kfs4$alphahat[,"sea_dummy1"],col=4)
axis(side=1,at=1+0:11*12,labels=c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
abline(v=120.5,lty=3)
plot(fabric-kfs2$muhat,type="l", ylab="販売額（10億円）",　xaxt="n",xaxs="i",yaxs="i",col=3,ylim=c(-150,150),xlab="（c）平滑化後の残差と予測誤差")
lines(fabric-kfs4$muhat,col=4)
axis(side=1,at=1+0:11*12,labels=c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
abline(v=120.5,lty=3)
abline(h=0,col=8)
library(tidyverse)
# 課題の基本はTourlist
Tourlist             <- read.csv("input/訪日外客数.csv", fileEncoding = "CP932")
#Tourlist_timeseries  <- read.csv("input/訪日外客数（年次推移）.csv", fileEncoding = "CP932")
log10()
log(1)
4.69^2
install.packages("beepr")
beepr::beep(sound = "facebook")
beepr::beep(sound = "facebook")
beepr::beep(sound = "facebook")
beepr::beep(sound = "facebook")
beepr::beep(sound = "coin")
beepr::beep(sound = "wilhelm")
beepr::beep(sound = "complete")
beepr::beep(sound = "ping")
beepr::beep(sound = "fanfare")
beepr::beep(sound = "mario")
install.packages("audio")
install.packages("audio")
library("dplyr")
library("audio")
notes <- c(A = 0, B = 2, C = 3, D = 5, E = 7, F = 8, G = 10)
pitch <- "D D E D G F# D D E D A G D D D5 B G F# E C5 C5 B G A G"
duration <- c(rep(c(0.75, 0.25, 1, 1, 1, 2), 2),
0.75, 0.25, 1, 1, 1, 1, 1, 0.75, 0.25, 1, 1, 1, 2)
bday <- data_frame(pitch = strsplit(pitch, " ")[[1]],
duration = duration)
bday <-
bday %>%
mutate(octave = substring(pitch, nchar(pitch)) %>%
{suppressWarnings(as.numeric(.))} %>%
ifelse(is.na(.), 4, .),
note = notes[substr(pitch, 1, 1)],
note = note + grepl("#", pitch) -
grepl("b", pitch) + octave * 12 +
12 * (note < 3),
freq = 2 ^ ((note - 60) / 12) * 440)
tempo <- 120
sample_rate <- 44100
make_sine <- function(freq, duration) {
wave <- sin(seq(0, duration / tempo * 60, 1 / sample_rate) *
freq * 2 * pi)
fade <- seq(0, 1, 50 / sample_rate)
wave * c(fade, rep(1, length(wave) - 2 * length(fade)), rev(fade))
}
bday_wave <-
mapply(make_sine, bday$freq, bday$duration) %>%
do.call("c", .)
play(bday_wave)
install.packages("PortAudio")
play(bday_wave)
library("dplyr")
library("audio")
library("dplyr")
library("audio")
notes <- c(A = 0, B = 2, C = 3, D = 5, E = 7, F = 8, G = 10)
pitch <- "D D E D G F# D D E D A G D D D5 B G F# E C5 C5 B G A G"
duration <- c(rep(c(0.75, 0.25, 1, 1, 1, 2), 2),
0.75, 0.25, 1, 1, 1, 1, 1, 0.75, 0.25, 1, 1, 1, 2)
bday <- data_frame(pitch = strsplit(pitch, " ")[[1]],
duration = duration)
bday <-
bday %>%
mutate(octave = substring(pitch, nchar(pitch)) %>%
{suppressWarnings(as.numeric(.))} %>%
ifelse(is.na(.), 4, .),
note = notes[substr(pitch, 1, 1)],
note = note + grepl("#", pitch) -
grepl("b", pitch) + octave * 12 +
12 * (note < 3),
freq = 2 ^ ((note - 60) / 12) * 440)
tempo <- 120
sample_rate <- 44100
make_sine <- function(freq, duration) {
wave <- sin(seq(0, duration / tempo * 60, 1 / sample_rate) *
freq * 2 * pi)
fade <- seq(0, 1, 50 / sample_rate)
wave * c(fade, rep(1, length(wave) - 2 * length(fade)), rev(fade))
}
bday_wave <-
mapply(make_sine, bday$freq, bday$duration) %>%
do.call("c", .)
play(bday_wave)
audio.drivers()
audio.drivers("portaudio")
# 課題の基本はTourlist
# 基本はKFASをrstanで再現する。
Tourlist             <- read.csv("input/訪日外客数_修正.csv", fileEncoding = "CP932")
View(Tourlist)
# 課題の基本はTourlist
# 基本はKFASをrstanで再現する。
Tourlist_old         <- read.csv("input/訪日外客数.csv", fileEncoding = "CP932")
plot(Tourlist$年月, Tourlist$中国)
library(tidyverse)
library(rstan)
library(ggplot2)
Tourlist$New_old     <- 'New'
Tourlist_old$New_old <- 'Old'
New_old_list <- Tourlist %>%
dplyr::bind_rows(Tourlist_old)
?geom_line
?aes
?geom_point
plot_1 <- ggplot(data = New_old_list)+
geom_line(aes(x = `年月`, y = `総数`), group = `New_old`)
plot_1 <- ggplot(data = New_old_list)+
geom_line(aes(x = `年月`, y = `総数`), group = `New_old`)
plot_1 <- ggplot(data = New_old_list)+
geom_line(aes(x = `年月`, y = `総数`), group = 'New_old')
plot_1
plot_1 <- ggplot(data = New_old_list)+
geom_line(aes(x = `年月`, y = `総数`), fill = 'New_old')
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = `総数`), fill = 'New_old')
plot_1
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = `総数`), group = 'New_old')
plot_1
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = `総数`, color=New_old), group = 'New_old')
plot_1
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = `総数`, color=New_old))
plot_1
col <- colnames(New_old_list)[-1]
dir.create('output')
for(col in cols){
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = col, color=New_old))
ggplot2::ggsave(plot_1,filename = paste0('output/pic', cols,'.png'))
}
cols <- colnames(New_old_list)[-1]
for(col in cols){
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = col, color=New_old))
ggplot2::ggsave(plot_1,filename = paste0('output/pic', cols,'.png'))
}
View(plot_1)
ggplot2::ggsave(plot_1,filename = paste0('output/pic', cols[col],'.png'))
cols <- colnames(New_old_list)[-1]
for(col in 1:length(cols)){
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = cols[col], color=New_old))
ggplot2::ggsave(plot_1,filename = paste0('output/pic', cols[col],'.png'))
}
for(col in 1:length(cols)){
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = cols[col], color=New_old))
plot(plot_1)
#ggplot2::ggsave(plot_1,filename = paste0('output/pic', cols[col],'.png'))
}
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = '年月', y = '総数', color=New_old))
plot_1
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = 年月, y = 総数, color=New_old))
plot_1
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = 年月, y = 中国, color=New_old))
for(col in 1:length(cols)){
plot_1 <- ggplot(data = New_old_list)+
geom_point(aes(x = `年月`, y = New_old_list[col+1], color=New_old))
plot(plot_1)
#ggplot2::ggsave(plot_1,filename = paste0('output/pic', cols[col],'.png'))
}
New_old_list[col+1]
cols <- colnames(New_old_list)[-1]
for(col in 1:length(cols)){
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'])
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'])
ping(plot_1,filename = paste0('output/pic', cols[col],'.png'))
}
for(col in 1:length(cols)){
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'])
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'])
png(plot_1,filename = paste0('output/pic', cols[col],'.png'))
}
for(col in 1:length(cols)){
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'])
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'])
png(filename = paste0('output/pic', cols[col],'.png'))
}
for(col in 1:length(cols)){
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'])
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'])
png(filename = paste0('output/pic', cols[col],'.png'))
dev.off()
}
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'])
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'])
dev.off()
}
cols <- colnames(New_old_list)[-c(1,22)]
cols
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])))
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])))
dev.off()
}
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])))
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
dev.off()
}
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])))
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
dev.off()
diff_plot <- New_old_list[,col+1][New_old_list$New_old=='New'] - New_old_list[,col+1][New_old_list$New_old=='Old']
png(filename = paste0('output/diff_plot_pic_', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y =diff_plot)
dev.off()
}
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])))
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'),width = 750, height = 750)
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])))
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
dev.off()
diff_plot <- New_old_list[,col+1][New_old_list$New_old=='New'] - New_old_list[,col+1][New_old_list$New_old=='Old']
png(filename = paste0('output/diff_plot_pic_', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y =diff_plot)
dev.off()
}
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'b')
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'b')
par(new=T)
plot(x = New_old_list$年月[New_old_list$New_old=='Old'], y = New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'b')
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y = New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'o')
plot(New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
plot(c(1:192),New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'o')
par(new=T)
plot(c(1:192),New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'),width = 750, height = 750)
plot(c(1:192),New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'b')
par(new=T)
plot(c(1:192),New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red')
dev.off()
diff_plot <- New_old_list[,col+1][New_old_list$New_old=='New'] - New_old_list[,col+1][New_old_list$New_old=='Old']
png(filename = paste0('output/diff_plot_pic_', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y =diff_plot)
dev.off()
}
for(col in 1:length(cols)){
png(filename = paste0('output/pic', cols[col],'.png'),width = 750, height = 750)
plot(c(1:192),New_old_list[,col+1][New_old_list$New_old=='New'],
ylim = c(0,max(New_old_list[,col+1][New_old_list$New_old=='New'])),
type = 'b')
par(new=T)
plot(c(1:192),New_old_list[,col+1][New_old_list$New_old=='Old'],
ylim = c(0, max(New_old_list[,col+1][New_old_list$New_old=='New'])),
col = 'red',type = 'o')
dev.off()
diff_plot <- New_old_list[,col+1][New_old_list$New_old=='New'] - New_old_list[,col+1][New_old_list$New_old=='Old']
png(filename = paste0('output/diff_plot_pic_', cols[col],'.png'))
plot(x = New_old_list$年月[New_old_list$New_old=='New'], y =diff_plot)
dev.off()
}
gc()
